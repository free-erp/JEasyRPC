/*
 * Copyright 2013, TengJianfa , and other individual contributors as indicated
 * by the @authors tag. See the copyright.txt in the distribution for a
 * full listing of individual contributors.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */

package org.free_erp.jeasyrpc.client;

import org.free_erp.jeasyrpc.CallInfo;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

/**
 *
 * @author Administrator
 */
public class NewJFrame extends javax.swing.JFrame {

    private String ip = "192.168.0.103";
    private final String value = "试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息测试中文信息";
    private byte[] bytes; 
    private int count;
    private List<Socket> sockets;//= new ArrayList<Socket>();
    private List<String> outStrings = new ArrayList<String>(10000);
    private List<String> oldStrings = new ArrayList<String>(10000);
    
    CallInfo callInfo;
    /** Creates new form NewJFrame */
    public NewJFrame() {
        initComponents();
        //System.out.println("len:" + value.getBytes().length);
        bytes = value.getBytes();
        
        callInfo = new CallInfo();
       
        callInfo.setMethodName("saveSomething");
        callInfo.addIntArg(333);
        callInfo.addShortArg(32);
        callInfo.addStringArg("我是滕建发");
       
        Timer timer = new Timer();
        TimerTask task = new TimerTask(){
            public void run()
            {
                printInfo();
            }
        };
        timer.schedule(task, 0, 2000);
        
    }
    
    private void printInfo()
    {
        count = outStrings.size();
        
        if (count > 0)
        {
            oldStrings.clear();
            oldStrings.addAll(outStrings);
            outStrings.clear();
            jTextArea1.setText("\n当前接收到信息条数:" + count);
            for(String v:oldStrings)
            {
                jTextArea1.append("\n" + v);
            }
            
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("客户端个数");

        jTextField1.setText("40");

        jLabel2.setText("发送字节数");

        jTextField2.setText("1024");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("send");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("connect");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 666, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(311, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

         timer = new Timer();
        TimerTask task = new TimerTask(){
            public void run()
            {
                sendInfo();
            }
        };
        timer.schedule(task, 0, 4000 + 10* count);
    }//GEN-LAST:event_jButton1ActionPerformed
    Timer timer ;
    private void sendInfo()
   {
       
    
                Object[] sockets = this.sockets.toArray();
                for(Object socketO:sockets)
                {
                    try
                    {
                        Socket socket = (Socket)socketO;
                        OutputStream op = socket.getOutputStream();
                        op.write(callInfo.toBytes());
                        //op.write(this.bytes);
                        Thread.sleep(10);
                    }
                    catch(Exception ex)
                    {
                        this.jTextArea2.append("\n" + ex.toString());
                        this.sockets.remove(socketO);
                        try
                        {
                            startSocket();
                        }
                        catch(Exception ex2)
                        {
                            this.jTextArea2.append("\n" + ex2.toString());
                        }
                    }
                
            }
            
}
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int threadCount = Integer.parseInt(this.jTextField1.getText());
        sockets = new ArrayList<Socket>(threadCount);
       
       for(int i = 0; i < threadCount; i++)
       {
            Thread thread = new Thread(){
                @Override
                public  void run() {
                    try
                    {
                        startSocket();
                    }
                    catch(Exception ex)
                    {
                        outStrings.add("\n" + ex.toString());
                    }
                }

            };
            thread.start();
            try
            {
                Thread.sleep(10);
            }
            catch(Exception ex)
            {
                this.outStrings.add("\n" + ex.toString());
            }
       }
       this.jButton1.setEnabled(true);
       this.jButton2.setEnabled(false);
    }//GEN-LAST:event_jButton2ActionPerformed

     
    public void startSocket() throws IOException
    {
        Socket socket = new Socket(ip, 7034);
        this.sockets.add(socket);
        InputStream stream = socket.getInputStream();
        
            byte[] values = new byte[10240];
            int len = stream.read(values);
            while(len > 0)
            {
                //this.outStrings.add("客户端:" + socket.getLocalPort() + "  received count:" + len + "\n");
                len = stream.read(values);
                if (values[0] == CallInfo.NET_ID)
                {
                    CallInfo info = new CallInfo(values);
                  //  this.outStrings.add("方法返回调用:" + info.getMethodName() + " 返回值:" + CallArgUtilities.getString(info.getReturnBytes()));
                }
            }
            socket.close();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
